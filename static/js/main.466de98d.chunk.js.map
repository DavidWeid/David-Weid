{"version":3,"sources":["components/Btns/index.js","pages/Home.js","pages/Contact.js","pages/Works.js","pages/About.js","App.js","serviceWorker.js","index.js"],"names":["NavBtn","props","react_default","a","createElement","type","className","concat","align","react_router_dom","active","to","destination","onClick","e","preventDefault","text","HomePage","id","ContactPage","WorksPage","AboutPage","PageContainer","styled","div","_templateObject","App","basename","react_router","render","_ref","location","TransitionGroup","component","CSSTransition","timeout","classNames","key","exact","path","Boolean","window","hostname","match","ReactDOM","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"+TAIO,SAASA,EAAOC,GACrB,OAGEC,EAAAC,EAAAC,cAAA,OACEC,KAAK,SACLC,UAAS,GAAAC,OAAKN,EAAMK,UAAX,kBACTE,MAAM,UAENN,EAAAC,EAAAC,cAACK,EAAA,EAAD,CACEH,UAAWL,EAAMS,OAAS,wBAA0B,WACpDC,GAAE,IAAAJ,OAAMN,EAAMW,aACdC,QAASZ,EAAMS,OAAS,SAAAI,GAAC,OAAIA,EAAEC,kBAAmB,MAEjDd,EAAMe,iBCQAC,EAtBE,SAAAhB,GACf,OACEC,EAAAC,EAAAC,cAAA,OAAKE,UAAU,aACbJ,EAAAC,EAAAC,cAACJ,EAAD,CAAQM,UAAU,YAAYM,YAAY,QAAQI,KAAK,UACvDd,EAAAC,EAAAC,cAACJ,EAAD,CAAQM,UAAU,YAAYM,YAAY,QAAQI,KAAK,UACvDd,EAAAC,EAAAC,cAACJ,EAAD,CAAQM,UAAU,cAAcM,YAAY,UAAUI,KAAK,YAC3Dd,EAAAC,EAAAC,cAAA,OAAKE,UAAU,gBACbJ,EAAAC,EAAAC,cAAA,OAAKE,UAAU,iBAAf,WACAJ,EAAAC,EAAAC,cAAA,OAAKE,UAAU,gBACbJ,EAAAC,EAAAC,cAAA,uBACaF,EAAAC,EAAAC,cAAA,QAAMc,GAAG,QAAT,qBAEbhB,EAAAC,EAAAC,cAAA,wCAC8BF,EAAAC,EAAAC,cAAA,6BAD9B,SAC8DF,EAAAC,EAAAC,cAAA,WAD9D,aAEUF,EAAAC,EAAAC,cAAA,uBAFV,2CCJKe,EATK,SAAAlB,GAClB,OACEC,EAAAC,EAAAC,cAAA,OAAKE,UAAU,gBACbJ,EAAAC,EAAAC,cAACJ,EAAD,CAAQM,UAAU,cAAcM,YAAY,GAAGI,KAAK,SACpDd,EAAAC,EAAAC,cAACJ,EAAD,CAAQM,UAAU,YAAYM,YAAY,QAAQI,KAAK,YCK9CI,EATG,SAAAnB,GAChB,OACEC,EAAAC,EAAAC,cAAA,OAAKE,UAAU,cACbJ,EAAAC,EAAAC,cAACJ,EAAD,CAAQM,UAAU,YAAYM,YAAY,GAAGI,KAAK,SAClDd,EAAAC,EAAAC,cAACJ,EAAD,CAAQM,UAAU,cAAcM,YAAY,UAAUI,KAAK,cCMlDK,EAVG,SAAApB,GAChB,OACEC,EAAAC,EAAAC,cAAA,OAAKE,UAAU,cACbJ,EAAAC,EAAAC,cAACJ,EAAD,CAAQM,UAAU,WAAWM,YAAY,GAAGI,KAAK,SACjDd,EAAAC,EAAAC,cAACJ,EAAD,CAAQM,UAAU,YAAYM,YAAY,QAAQI,KAAK,UACvDd,EAAAC,EAAAC,cAACJ,EAAD,CAAQM,UAAU,cAAcM,YAAY,UAAUI,KAAK,uKCAjE,IAAMM,EAAgBC,IAAOC,IAAVC,KAoCJC,MA7Bf,WACE,OACExB,EAAAC,EAAAC,cAACK,EAAA,EAAD,CAAYkB,SAAS,cACnBzB,EAAAC,EAAAC,cAACwB,EAAA,EAAD,CACEC,OAAQ,SAAAC,GAAkB,IAAfC,EAAeD,EAAfC,SACT,OACE7B,EAAAC,EAAAC,cAACkB,EAAD,CAAehB,UAAU,aACvBJ,EAAAC,EAAAC,cAAC4B,EAAA,EAAD,CAAiBC,UAAW,MAC1B/B,EAAAC,EAAAC,cAAC8B,EAAA,EAAD,CACEC,QAAS,IACTC,WAAW,OACXC,IAAKN,EAASM,KAEdnC,EAAAC,EAAAC,cAACwB,EAAA,EAAD,CAAQG,SAAUA,GAChB7B,EAAAC,EAAAC,cAACwB,EAAA,EAAD,CAAOU,OAAK,EAACC,KAAK,IAAIN,UAAWhB,IACjCf,EAAAC,EAAAC,cAACwB,EAAA,EAAD,CAAOU,OAAK,EAACC,KAAK,WAAWN,UAAWd,IACxCjB,EAAAC,EAAAC,cAACwB,EAAA,EAAD,CAAOU,OAAK,EAACC,KAAK,SAASN,UAAWb,IACtClB,EAAAC,EAAAC,cAACwB,EAAA,EAAD,CAAOU,OAAK,EAACC,KAAK,SAASN,UAAWZ,aCpBtCmB,QACW,cAA7BC,OAAOV,SAASW,UAEe,UAA7BD,OAAOV,SAASW,UAEhBD,OAAOV,SAASW,SAASC,MACvB,2DCZNC,IAASf,OAAO3B,EAAAC,EAAAC,cAACyC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.466de98d.chunk.js","sourcesContent":["import React from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\nimport \"./navBtns.scss\";\r\n\r\nexport function NavBtn(props) {\r\n  return (\r\n    // props.className = \"nav-home\", \"nav-about\", \"nav-works\", or \"nav-contact\"\r\n    // props.active will disable the button\r\n    <div\r\n      type=\"button\"\r\n      className={`${props.className} nav-container`}\r\n      align=\"center\"\r\n    >\r\n      <Link\r\n        className={props.active ? \"btn-link btn-disabled\" : \"btn-link\"}\r\n        to={`/${props.destination}`}\r\n        onClick={props.active ? e => e.preventDefault() : null}\r\n      >\r\n        {props.text}\r\n      </Link>\r\n    </div>\r\n  );\r\n}\r\n","import React from \"react\";\r\nimport { NavBtn } from \"../components/Btns\";\r\nimport \"./home.scss\";\r\n\r\nconst HomePage = props => {\r\n  return (\r\n    <div className=\"page-home\">\r\n      <NavBtn className=\"nav-about\" destination=\"about\" text=\"About\" />\r\n      <NavBtn className=\"nav-works\" destination=\"works\" text=\"Works\" />\r\n      <NavBtn className=\"nav-contact\" destination=\"contact\" text=\"Contact\" />\r\n      <div className=\"content-home\">\r\n        <div className=\"content-title\">Welcome</div>\r\n        <div className=\"content-body\">\r\n          <p>\r\n            My name is <span id=\"name\">David J. Weid II</span>\r\n          </p>\r\n          <p>\r\n            I am a certified Full Stack <span>Web Developer</span> with <br />a\r\n            genuine <span>passion</span> to never stop learning and coding.\r\n          </p>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default HomePage;\r\n","import React from \"react\";\r\nimport { NavBtn } from \"../components/Btns\";\r\n\r\nconst ContactPage = props => {\r\n  return (\r\n    <div className=\"page-contact\">\r\n      <NavBtn className=\"nav-contact\" destination=\"\" text=\"Home\" />\r\n      <NavBtn className=\"nav-works\" destination=\"works\" text=\"Works\" />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default ContactPage;\r\n","import React from \"react\";\r\nimport { NavBtn } from \"../components/Btns\";\r\n\r\nconst WorksPage = props => {\r\n  return (\r\n    <div className=\"page-works\">\r\n      <NavBtn className=\"nav-works\" destination=\"\" text=\"Home\" />\r\n      <NavBtn className=\"nav-contact\" destination=\"contact\" text=\"Contact\" />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default WorksPage;\r\n","import React from \"react\";\r\nimport { NavBtn } from \"../components/Btns\";\r\n\r\nconst AboutPage = props => {\r\n  return (\r\n    <div className=\"page-about\">\r\n      <NavBtn className=\"nav-home\" destination=\"\" text=\"Home\" />\r\n      <NavBtn className=\"nav-works\" destination=\"works\" text=\"Works\" />\r\n      <NavBtn className=\"nav-contact\" destination=\"contact\" text=\"Contact\" />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default AboutPage;\r\n","import React from \"react\";\nimport { BrowserRouter as HashRouter, Route, Switch } from \"react-router-dom\";\nimport { TransitionGroup, CSSTransition } from \"react-transition-group\";\nimport styled from \"styled-components\";\nimport \"./App.scss\";\n\nimport { HomePage, ContactPage, WorksPage, AboutPage } from \"./pages\";\n\nconst PageContainer = styled.div`\n  position: relative;\n  width: 100vw;\n  height: 100vh;\n  // overflow: hidden;\n`;\n\nfunction App() {\n  return (\n    <HashRouter basename=\"/portfolio\">\n      <Route\n        render={({ location }) => {\n          return (\n            <PageContainer className=\"container\">\n              <TransitionGroup component={null}>\n                <CSSTransition\n                  timeout={700}\n                  classNames=\"page\"\n                  key={location.key}\n                >\n                  <Switch location={location}>\n                    <Route exact path=\"/\" component={HomePage} />\n                    <Route exact path=\"/contact\" component={ContactPage} />\n                    <Route exact path=\"/works\" component={WorksPage} />\n                    <Route exact path=\"/about\" component={AboutPage} />\n                  </Switch>\n                </CSSTransition>\n              </TransitionGroup>\n            </PageContainer>\n          );\n        }}\n      />\n    </HashRouter>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === \"localhost\" ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === \"[::1]\" ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === \"production\" && \"serviceWorker\" in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener(\"load\", () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            \"This web app is being served cache-first by a service \" +\n              \"worker. To learn more, visit https://bit.ly/CRA-PWA\"\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === \"installed\") {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                \"New content is available and will be used when all \" +\n                  \"tabs for this page are closed. See https://bit.ly/CRA-PWA.\"\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log(\"Content is cached for offline use.\");\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error(\"Error during service worker registration:\", error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get(\"content-type\");\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf(\"javascript\") === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        \"No internet connection found. App is running in offline mode.\"\n      );\n    });\n}\n\nexport function unregister() {\n  if (\"serviceWorker\" in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.scss\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}